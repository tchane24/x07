        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Switches turn member variable to represent whether it's X's or O's turn
       59:    8:void TicTacToeBoard::toggleTurn()
        -:    9:{
       59:   10:	if(turn == X)
        -:   11:	{
       24:   12:		turn = O;
        -:   13:	}
       35:   14:	else if(turn == O)
        -:   15:	{
       35:   16:		turn = X;
        -:   17:	}
       59:   18:}
        -:   19:
        -:   20://Constructor sets an empty board and specifies it is X's turn first
       18:   21:TicTacToeBoard::TicTacToeBoard()
        -:   22:{
       18:   23:	clearBoard();
       18:   24:	turn = O; //Setting turn to O because placePiece() toggles when called
       18:   25:}
        -:   26:
        -:   27://Resets each board location to the Blank Piece value
       19:   28:void TicTacToeBoard::clearBoard()
        -:   29:{
       76:   30:	for(int i=0; i < BOARDSIZE; i++)
      228:   31:		for(int j=0; j < BOARDSIZE; j++)
        -:   32:		{
      171:   33:			board[i][j] = Blank;
        -:   34:		}
       19:   35:}
        -:   36:
        -:   37:/**
        -:   38: * Places the piece of the current turn on the board, returns what
        -:   39: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   40: * NOT allow to place a piece in a location where there is already a piece.
        -:   41: * In that case, placePiece just returns what is already at that location. 
        -:   42: * Out of bounds coordinates return the Piece Invalid value
        -:   43:**/ 
       59:   44:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   45:{
       59:   46:	toggleTurn();
       59:   47:	if(row > 2 || row < 0 || column > 2 || column < 0)
        1:   48:		return Invalid;
       58:   49:	if(board[row][column] != Blank)
        2:   50:		return board[row][column];
       56:   51:	board[row][column] = turn;
       56:   52:	return turn;
        -:   53:}
        -:   54:
        -:   55:/**
        -:   56: * Returns what piece is at the provided coordinates, or Blank if there
        -:   57: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   58:**/
      167:   59:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   60:{
      167:   61:	if(row >= 0 && row <= 2)
        -:   62:	{
      166:   63:		if(column >= 0 && column <= 2)
        -:   64:		{
      166:   65:		return board[row][column];
        -:   66:		}
        -:   67:	}
        1:   68:	return Invalid;
        -:   69:}
        -:   70:
        -:   71:/**
        -:   72: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   73: * is not over, or Blank if the board is filled and no one has won.
        -:   74:**/
       10:   75:Piece TicTacToeBoard::getWinner()
        -:   76:{
       10:   77:	if(getPiece(0,0)!=Blank && getPiece(0,0)==getPiece(1,1) && getPiece(1,1)==getPiece(2,2))
        1:   78:		return getPiece(0,0);
        9:   79:	if(getPiece(0,1)!=Blank && getPiece(0,1)==getPiece(1,1) && getPiece(1,1)==getPiece(2,1))
        1:   80:		return getPiece(0,1);
        8:   81:	if(getPiece(0,2)!=Blank && getPiece(0,2)==getPiece(1,1) && getPiece(1,1)==getPiece(2,0))
        1:   82:		return getPiece(0,2);
        7:   83:	if(getPiece(0,0)!=Blank && getPiece(0,0)==getPiece(0,1) && getPiece(0,1)==getPiece(0,2))
        1:   84:		return getPiece(0,0);
        6:   85:	if(getPiece(1,0)!=Blank && getPiece(1,0)==getPiece(1,1) && getPiece(1,1)==getPiece(1,2))
        1:   86:		return getPiece(1,0);
        5:   87:	if(getPiece(2,0)!=Blank && getPiece(2,0)==getPiece(2,1) && getPiece(2,1)==getPiece(2,2))
        1:   88:		return getPiece(2,0);
        4:   89:	if(getPiece(0,0)!=Blank && getPiece(0,0)==getPiece(1,0) && getPiece(1,0)==getPiece(2,0))
        1:   90:		return getPiece(0,0);
        3:   91:	if(getPiece(0,2)!=Blank && getPiece(0,2)==getPiece(1,2) && getPiece(1,2)==getPiece(2,2))
        1:   92:		return getPiece(0,2);
        5:   93:	for(int i=0; i<BOARDSIZE; i++)
        -:   94:	{
       14:   95:		for(int j=0; j<BOARDSIZE; j++)
        -:   96:		{
       11:   97:			if(board[i][j] == Blank)
        1:   98:				return Invalid;
        -:   99:		}
        -:  100:	}
        1:  101:	return Blank;
        -:  102:}
